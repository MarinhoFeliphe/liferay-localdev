import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

gradle.projectsEvaluated {
  buildDockerImage.dependsOn = buildDockerImage.dependsOn.findAll { !it.path.startsWith(":client-extensions") }

  subprojects {
    if (path.startsWith(":client-extensions") && file("client-extension.yaml").exists()) {
      apply plugin: "com.bmuschko.docker-remote-api"

      if (file("Dockerfile").exists()) {
        task buildClientExtensionDockerImage(type: DockerBuildImage) {
          dependsOn "assembleClientExtension"
          inputDir = project.file("${buildDir}/clientExtension")
          if (project.hasProperty("imageId")) {
            images.add(project.property("imageId"))
          }
        }
      } else {
        task buildClientExtensionDockerImage(type: DockerBuildImage) {
          dependsOn "assembleClientExtension"
          inputDir = project.file("${buildDir}/clientExtension")
          if (project.hasProperty("imageId")) {
            images.add(project.property("imageId"))
          }
        }

        assembleClientExtension {
          from "/repo/k8s/tls/ca.crt"
        }
      }

      task applyClientExtensionConfigMap {
        doLast {
          def serviceId = project.property("serviceId")
          def virtualInstanceId = project.property("virtualInstanceId")

          def kubeApplyArgs = [
            "ytt",
            "-f /repo/k8s/workloads/extension-configmap.yaml",
            "--data-value serviceId=${serviceId}",
            "--data-value virtualInstanceId=${virtualInstanceId}",
          ]

          fileTree("${buildDir}/clientExtension").matching {
            include "*.client-extension-config.json"
          }.each {
            kubeApplyArgs += "-f ${it}"
          }

          kubeApplyArgs += "| kubectl apply -f-"

          exec {
            commandLine = ['bash', '-c', kubeApplyArgs.join(' ')]
          }
        }
      }

      if (hasProperty('buildScan')) {
        buildScan {
          termsOfServiceUrl = 'https://gradle.com/terms-of-service'
          termsOfServiceAgree = 'yes'
        }
      }
    }
  }
}