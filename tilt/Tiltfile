# Function process_extension
def process_extension(
    name, projectPath, workload, targetPort, virtual_instance_id='dxp.localdev.me', 
    source_deps=[], objects=[], port_forwards=[], resource_deps=[], links=[]):

  more_deps = []
  for source_dep in source_deps:
    more_deps.append("/workspace/%s/%s" % (projectPath, source_dep)) 

  custom_build(
    name,
    "/workspace/gradlew --project-dir /workspace :%s:buildClientExtensionDockerImage --stacktrace -PimageId=$EXPECTED_REF" % projectPath.replace("/", ":"),
    deps=[
      "/workspace/%s/src" % projectPath,
      "/workspace/%s/build.gradle" % projectPath,
      "/workspace/%s/client-extension.yaml" % projectPath,
      "/workspace/%s/Dockerfile" % projectPath,
    ] + more_deps,
    ignore=[])

  local("/workspace/gradlew --project-dir /workspace :%s:createClientExtensionConfig --stacktrace" % projectPath.replace("/", ":"))

  config_json_file = "/workspace/%s/build/%s.client-extension-config.json" % (projectPath, name)

  init_metadata = False

  if workload != "static":
    init_metadata = True

  k8s_yaml(
    local("""
      ytt \
        -f /repo/k8s/workloads/%s \
        -f %s \
        --data-value-yaml initMetadata=%s \
        --data-value image=%s \
        --data-value serviceId=%s \
        --data-value-yaml targetPort=%s \
        --data-value virtualInstanceId=%s"""
        % (workload, config_json_file, init_metadata, name, name, targetPort, virtual_instance_id)))

  if workload != "job":
    objects = [
      "%s:ingress" % name,
      "%s:ingressroute" % name
    ]

  k8s_resource(
    labels=['extensions'],
    port_forwards=port_forwards,
    objects=['%s-%s-lxc-ext-provision-metadata:configmap' % (name, virtual_instance_id)] + objects,
    resource_deps=['dxp.localdev.me'] + resource_deps,
    workload=name,
    links=links)

#main code

update_settings(max_parallel_updates=1)

watch_file('/repo/k8s/endpoint/')
watch_file('/repo/k8s/workloads/')

if config.tilt_subcommand == 'down':
  local('kubectl delete cm -l lxc.liferay.com/metadataType=ext-init')
  local('/repo/scripts/dxp-stop.sh')

# build and launch dxp

local_resource(
  'dxp.localdev.me', 
  cmd="",
  serve_cmd="/repo/scripts/dxp-restart.sh",
  deps=["/repo/docker/images/dxp-server"],
  readiness_probe=probe(
      initial_delay_secs=120,
      timeout_secs=5,
      period_secs=5,
      failure_threshold=99,
      http_get=http_get_action(port=8080, host='host.docker.internal', scheme='http', path='/health')),
  trigger_mode = TRIGGER_MODE_MANUAL,
  links=[
    link('https://dxp.localdev.me'),
    link('https://dxp.localdev.me/o/api', 'Liferay API Explorer'),
  ],
  labels=['dxp'])

#for tiltfile in str(local("find /workspace/client-extensions -name Tiltfile -not -path '*/build/*' -not -path '*/node_modules/*' -not -path '*/node_modules_cache/*' 2>/dev/null")).splitlines():
#  include(tiltfile)

for client_extension_yaml_file in str(local("find /workspace/client-extensions -name client-extension.yaml -not -path '*/build/*' -not -path '*/node_modules/*' -not -path '*/node_modules_cache/*' 2>/dev/null")).splitlines():
  project_path=os.path.dirname(client_extension_yaml_file)
  client_extension_name=os.path.basename(project_path)
  client_extension_object=read_yaml(client_extension_yaml_file)
  workload='static'
  resource_deps=[]
  targetPort=80
  watch=[]

  if client_extension_object.get('runtime'):
    if client_extension_object['runtime'].get('workload') != None:
      workload=client_extension_object['runtime']['workload'] 

    if client_extension_object['runtime'].get('deps') != None:
      resource_deps=[client_extension_object['runtime']['deps'][0]]

    if client_extension_object['runtime'].get('port') != None:
      targetPort=client_extension_object['runtime']['port']

    if client_extension_object['runtime'].get('watch') != None:
      watch=client_extension_object['runtime']['watch']

  process_extension(
    client_extension_name, 
    "client-extensions/%s" % client_extension_name, 
    source_deps=watch,
    targetPort=targetPort,
    workload=workload,
    resource_deps=resource_deps)